version: '3.3'

services:
  web:
    build: .
    command: python3 manage.py runserver 0.0.0.0:8001
    volumes:
      - .:/app/
    ports:
      - 8001:8001
    env_file:
      - ./.env.dev
    depends_on:
      - db
    links:
      - db:db
      - redis:redis
    networks:
      - backend

  redis:
    image: redis:latest
    restart: always
    ports:
      - 6380:6380
    command:
      - redis-server
    networks:
      - backend

  db:
    image: postgres:13.0-alpine
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=smartback
      - POSTGRES_USER=smartback
      - POSTGRES_PASSWORD=smartback
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    hostname: zookeeper

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - 29094:29092
    environment:
      KAFKA_CREATE_TOPICS: "irsensor-alerts-local:1:1,semgsensor-alerts-local:1:1,inertialsensor-alerts-local:1:1,ipc-alerts-local:1:1"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://127.0.0.1:29094
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


volumes:
  pgdata:

networks:
  backend:
    driver: bridge